[
  {
    "nodeType": "Stmt_If",
    "cond": {
      "nodeType": "Expr_BooleanNot",
      "expr": {
        "nodeType": "Expr_FuncCall",
        "name": {
          "nodeType": "Name",
          "parts": [
            "is_callable"
          ],
          "attributes": {
            "startLine": 3,
            "endLine": 3
          }
        },
        "args": [
          {
            "nodeType": "Arg",
            "value": {
              "nodeType": "Scalar_String",
              "value": "random_int",
              "attributes": {
                "startLine": 3,
                "endLine": 3,
                "kind": 1
              }
            },
            "byRef": false,
            "unpack": false,
            "attributes": {
              "startLine": 3,
              "endLine": 3
            }
          }
        ],
        "attributes": {
          "startLine": 3,
          "endLine": 3
        }
      },
      "attributes": {
        "startLine": 3,
        "endLine": 3
      }
    },
    "stmts": [
      {
        "nodeType": "Stmt_Function",
        "byRef": false,
        "name": {
          "nodeType": "Identifier",
          "name": "random_int",
          "attributes": {
            "startLine": 41,
            "endLine": 41
          }
        },
        "params": [
          {
            "nodeType": "Param",
            "type": null,
            "byRef": false,
            "variadic": false,
            "var": {
              "nodeType": "Expr_Variable",
              "name": "min",
              "attributes": {
                "startLine": 41,
                "endLine": 41
              }
            },
            "default": null,
            "attributes": {
              "startLine": 41,
              "endLine": 41
            }
          },
          {
            "nodeType": "Param",
            "type": null,
            "byRef": false,
            "variadic": false,
            "var": {
              "nodeType": "Expr_Variable",
              "name": "max",
              "attributes": {
                "startLine": 41,
                "endLine": 41
              }
            },
            "default": null,
            "attributes": {
              "startLine": 41,
              "endLine": 41
            }
          }
        ],
        "returnType": null,
        "stmts": [
          {
            "nodeType": "Stmt_TryCatch",
            "stmts": [
              {
                "nodeType": "Stmt_Expression",
                "expr": {
                  "nodeType": "Expr_Assign",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "min",
                    "attributes": {
                      "startLine": 54,
                      "endLine": 54
                    }
                  },
                  "expr": {
                    "nodeType": "Expr_FuncCall",
                    "name": {
                      "nodeType": "Name",
                      "parts": [
                        "RandomCompat_intval"
                      ],
                      "attributes": {
                        "startLine": 54,
                        "endLine": 54
                      }
                    },
                    "args": [
                      {
                        "nodeType": "Arg",
                        "value": {
                          "nodeType": "Expr_Variable",
                          "name": "min",
                          "attributes": {
                            "startLine": 54,
                            "endLine": 54
                          }
                        },
                        "byRef": false,
                        "unpack": false,
                        "attributes": {
                          "startLine": 54,
                          "endLine": 54
                        }
                      }
                    ],
                    "attributes": {
                      "startLine": 54,
                      "endLine": 54
                    }
                  },
                  "attributes": {
                    "startLine": 54,
                    "endLine": 54
                  }
                },
                "attributes": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            ],
            "catches": [
              {
                "nodeType": "Stmt_Catch",
                "types": [
                  {
                    "nodeType": "Name",
                    "parts": [
                      "TypeError"
                    ],
                    "attributes": {
                      "startLine": 55,
                      "endLine": 55
                    }
                  }
                ],
                "var": {
                  "nodeType": "Expr_Variable",
                  "name": "ex",
                  "attributes": {
                    "startLine": 55,
                    "endLine": 55
                  }
                },
                "stmts": [
                  {
                    "nodeType": "Stmt_Throw",
                    "expr": {
                      "nodeType": "Expr_New",
                      "class": {
                        "nodeType": "Name",
                        "parts": [
                          "TypeError"
                        ],
                        "attributes": {
                          "startLine": 56,
                          "endLine": 56
                        }
                      },
                      "args": [
                        {
                          "nodeType": "Arg",
                          "value": {
                            "nodeType": "Scalar_String",
                            "value": "random_int(): $min must be an integer",
                            "attributes": {
                              "startLine": 57,
                              "endLine": 57,
                              "kind": 1
                            }
                          },
                          "byRef": false,
                          "unpack": false,
                          "attributes": {
                            "startLine": 57,
                            "endLine": 57
                          }
                        }
                      ],
                      "attributes": {
                        "startLine": 56,
                        "endLine": 58
                      }
                    },
                    "attributes": {
                      "startLine": 56,
                      "endLine": 58
                    }
                  }
                ],
                "attributes": {
                  "startLine": 55,
                  "endLine": 59
                }
              }
            ],
            "finally": null,
            "attributes": {
              "startLine": 53,
              "comments": [
                {
                  "nodeType": "Comment_Doc",
                  "text": "/**\n         * Type and input logic checks\n         *\n         * If you pass it a float in the range (~PHP_INT_MAX, PHP_INT_MAX)\n         * (non-inclusive), it will sanely cast it to an int. If you it's equal to\n         * ~PHP_INT_MAX or PHP_INT_MAX, we let it fail as not an integer. Floats\n         * lose precision, so the <= and => operators might accidentally let a float\n         * through.\n         */",
                  "line": 43,
                  "filePos": 1651,
                  "tokenPos": 30,
                  "endLine": 51,
                  "endFilePos": 2059,
                  "endTokenPos": 30
                }
              ],
              "endLine": 59
            }
          },
          {
            "nodeType": "Stmt_TryCatch",
            "stmts": [
              {
                "nodeType": "Stmt_Expression",
                "expr": {
                  "nodeType": "Expr_Assign",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "max",
                    "attributes": {
                      "startLine": 62,
                      "endLine": 62
                    }
                  },
                  "expr": {
                    "nodeType": "Expr_FuncCall",
                    "name": {
                      "nodeType": "Name",
                      "parts": [
                        "RandomCompat_intval"
                      ],
                      "attributes": {
                        "startLine": 62,
                        "endLine": 62
                      }
                    },
                    "args": [
                      {
                        "nodeType": "Arg",
                        "value": {
                          "nodeType": "Expr_Variable",
                          "name": "max",
                          "attributes": {
                            "startLine": 62,
                            "endLine": 62
                          }
                        },
                        "byRef": false,
                        "unpack": false,
                        "attributes": {
                          "startLine": 62,
                          "endLine": 62
                        }
                      }
                    ],
                    "attributes": {
                      "startLine": 62,
                      "endLine": 62
                    }
                  },
                  "attributes": {
                    "startLine": 62,
                    "endLine": 62
                  }
                },
                "attributes": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            ],
            "catches": [
              {
                "nodeType": "Stmt_Catch",
                "types": [
                  {
                    "nodeType": "Name",
                    "parts": [
                      "TypeError"
                    ],
                    "attributes": {
                      "startLine": 63,
                      "endLine": 63
                    }
                  }
                ],
                "var": {
                  "nodeType": "Expr_Variable",
                  "name": "ex",
                  "attributes": {
                    "startLine": 63,
                    "endLine": 63
                  }
                },
                "stmts": [
                  {
                    "nodeType": "Stmt_Throw",
                    "expr": {
                      "nodeType": "Expr_New",
                      "class": {
                        "nodeType": "Name",
                        "parts": [
                          "TypeError"
                        ],
                        "attributes": {
                          "startLine": 64,
                          "endLine": 64
                        }
                      },
                      "args": [
                        {
                          "nodeType": "Arg",
                          "value": {
                            "nodeType": "Scalar_String",
                            "value": "random_int(): $max must be an integer",
                            "attributes": {
                              "startLine": 65,
                              "endLine": 65,
                              "kind": 1
                            }
                          },
                          "byRef": false,
                          "unpack": false,
                          "attributes": {
                            "startLine": 65,
                            "endLine": 65
                          }
                        }
                      ],
                      "attributes": {
                        "startLine": 64,
                        "endLine": 66
                      }
                    },
                    "attributes": {
                      "startLine": 64,
                      "endLine": 66
                    }
                  }
                ],
                "attributes": {
                  "startLine": 63,
                  "endLine": 67
                }
              }
            ],
            "finally": null,
            "attributes": {
              "startLine": 61,
              "endLine": 67
            }
          },
          {
            "nodeType": "Stmt_If",
            "cond": {
              "nodeType": "Expr_BinaryOp_Greater",
              "left": {
                "nodeType": "Expr_Variable",
                "name": "min",
                "attributes": {
                  "startLine": 74,
                  "endLine": 74
                }
              },
              "right": {
                "nodeType": "Expr_Variable",
                "name": "max",
                "attributes": {
                  "startLine": 74,
                  "endLine": 74
                }
              },
              "attributes": {
                "startLine": 74,
                "endLine": 74
              }
            },
            "stmts": [
              {
                "nodeType": "Stmt_Throw",
                "expr": {
                  "nodeType": "Expr_New",
                  "class": {
                    "nodeType": "Name",
                    "parts": [
                      "Error"
                    ],
                    "attributes": {
                      "startLine": 75,
                      "endLine": 75
                    }
                  },
                  "args": [
                    {
                      "nodeType": "Arg",
                      "value": {
                        "nodeType": "Scalar_String",
                        "value": "Minimum value must be less than or equal to the maximum value",
                        "attributes": {
                          "startLine": 76,
                          "endLine": 76,
                          "kind": 1
                        }
                      },
                      "byRef": false,
                      "unpack": false,
                      "attributes": {
                        "startLine": 76,
                        "endLine": 76
                      }
                    }
                  ],
                  "attributes": {
                    "startLine": 75,
                    "endLine": 77
                  }
                },
                "attributes": {
                  "startLine": 75,
                  "endLine": 77
                }
              }
            ],
            "elseifs": [],
            "else": null,
            "attributes": {
              "startLine": 74,
              "comments": [
                {
                  "nodeType": "Comment_Doc",
                  "text": "/**\n         * Now that we've verified our weak typing system has given us an integer,\n         * let's validate the logic then we can move forward with generating random\n         * integers along a given range.\n         */",
                  "line": 69,
                  "filePos": 2488,
                  "tokenPos": 112,
                  "endLine": 73,
                  "endFilePos": 2710,
                  "endTokenPos": 112
                }
              ],
              "endLine": 78
            }
          },
          {
            "nodeType": "Stmt_If",
            "cond": {
              "nodeType": "Expr_BinaryOp_Identical",
              "left": {
                "nodeType": "Expr_Variable",
                "name": "max",
                "attributes": {
                  "startLine": 80,
                  "endLine": 80
                }
              },
              "right": {
                "nodeType": "Expr_Variable",
                "name": "min",
                "attributes": {
                  "startLine": 80,
                  "endLine": 80
                }
              },
              "attributes": {
                "startLine": 80,
                "endLine": 80
              }
            },
            "stmts": [
              {
                "nodeType": "Stmt_Return",
                "expr": {
                  "nodeType": "Expr_Cast_Int",
                  "expr": {
                    "nodeType": "Expr_Variable",
                    "name": "min",
                    "attributes": {
                      "startLine": 81,
                      "endLine": 81
                    }
                  },
                  "attributes": {
                    "startLine": 81,
                    "endLine": 81
                  }
                },
                "attributes": {
                  "startLine": 81,
                  "endLine": 81
                }
              }
            ],
            "elseifs": [],
            "else": null,
            "attributes": {
              "startLine": 80,
              "endLine": 82
            }
          },
          {
            "nodeType": "Stmt_Expression",
            "expr": {
              "nodeType": "Expr_Assign",
              "var": {
                "nodeType": "Expr_Variable",
                "name": "attempts",
                "attributes": {
                  "startLine": 92,
                  "comments": [
                    {
                      "nodeType": "Comment_Doc",
                      "text": "/**\n         * Initialize variables to 0\n         *\n         * We want to store:\n         * $bytes => the number of random bytes we need\n         * $mask => an integer bitmask (for use with the &) operator\n         *          so we can minimize the number of discards\n         */",
                      "line": 84,
                      "filePos": 2953,
                      "tokenPos": 161,
                      "endLine": 91,
                      "endFilePos": 3231,
                      "endTokenPos": 161
                    }
                  ],
                  "endLine": 92
                }
              },
              "expr": {
                "nodeType": "Expr_Assign",
                "var": {
                  "nodeType": "Expr_Variable",
                  "name": "bits",
                  "attributes": {
                    "startLine": 92,
                    "endLine": 92
                  }
                },
                "expr": {
                  "nodeType": "Expr_Assign",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "bytes",
                    "attributes": {
                      "startLine": 92,
                      "endLine": 92
                    }
                  },
                  "expr": {
                    "nodeType": "Expr_Assign",
                    "var": {
                      "nodeType": "Expr_Variable",
                      "name": "mask",
                      "attributes": {
                        "startLine": 92,
                        "endLine": 92
                      }
                    },
                    "expr": {
                      "nodeType": "Expr_Assign",
                      "var": {
                        "nodeType": "Expr_Variable",
                        "name": "valueShift",
                        "attributes": {
                          "startLine": 92,
                          "endLine": 92
                        }
                      },
                      "expr": {
                        "nodeType": "Scalar_LNumber",
                        "value": 0,
                        "attributes": {
                          "startLine": 92,
                          "endLine": 92,
                          "kind": 10
                        }
                      },
                      "attributes": {
                        "startLine": 92,
                        "endLine": 92
                      }
                    },
                    "attributes": {
                      "startLine": 92,
                      "endLine": 92
                    }
                  },
                  "attributes": {
                    "startLine": 92,
                    "endLine": 92
                  }
                },
                "attributes": {
                  "startLine": 92,
                  "endLine": 92
                }
              },
              "attributes": {
                "startLine": 92,
                "comments": [
                  {
                    "nodeType": "Comment_Doc",
                    "text": "/**\n         * Initialize variables to 0\n         *\n         * We want to store:\n         * $bytes => the number of random bytes we need\n         * $mask => an integer bitmask (for use with the &) operator\n         *          so we can minimize the number of discards\n         */",
                    "line": 84,
                    "filePos": 2953,
                    "tokenPos": 161,
                    "endLine": 91,
                    "endFilePos": 3231,
                    "endTokenPos": 161
                  }
                ],
                "endLine": 92
              }
            },
            "attributes": {
              "startLine": 92,
              "comments": [
                {
                  "nodeType": "Comment_Doc",
                  "text": "/**\n         * Initialize variables to 0\n         *\n         * We want to store:\n         * $bytes => the number of random bytes we need\n         * $mask => an integer bitmask (for use with the &) operator\n         *          so we can minimize the number of discards\n         */",
                  "line": 84,
                  "filePos": 2953,
                  "tokenPos": 161,
                  "endLine": 91,
                  "endFilePos": 3231,
                  "endTokenPos": 161
                }
              ],
              "endLine": 92
            }
          },
          {
            "nodeType": "Stmt_Expression",
            "expr": {
              "nodeType": "Expr_Assign",
              "var": {
                "nodeType": "Expr_Variable",
                "name": "range",
                "attributes": {
                  "startLine": 99,
                  "comments": [
                    {
                      "nodeType": "Comment_Doc",
                      "text": "/**\n         * At this point, $range is a positive number greater than 0. It might\n         * overflow, however, if $max - $min > PHP_INT_MAX. PHP will cast it to\n         * a float and we will lose some precision.\n         */",
                      "line": 94,
                      "filePos": 3304,
                      "tokenPos": 186,
                      "endLine": 98,
                      "endFilePos": 3529,
                      "endTokenPos": 186
                    }
                  ],
                  "endLine": 99
                }
              },
              "expr": {
                "nodeType": "Expr_BinaryOp_Minus",
                "left": {
                  "nodeType": "Expr_Variable",
                  "name": "max",
                  "attributes": {
                    "startLine": 99,
                    "endLine": 99
                  }
                },
                "right": {
                  "nodeType": "Expr_Variable",
                  "name": "min",
                  "attributes": {
                    "startLine": 99,
                    "endLine": 99
                  }
                },
                "attributes": {
                  "startLine": 99,
                  "endLine": 99
                }
              },
              "attributes": {
                "startLine": 99,
                "comments": [
                  {
                    "nodeType": "Comment_Doc",
                    "text": "/**\n         * At this point, $range is a positive number greater than 0. It might\n         * overflow, however, if $max - $min > PHP_INT_MAX. PHP will cast it to\n         * a float and we will lose some precision.\n         */",
                    "line": 94,
                    "filePos": 3304,
                    "tokenPos": 186,
                    "endLine": 98,
                    "endFilePos": 3529,
                    "endTokenPos": 186
                  }
                ],
                "endLine": 99
              }
            },
            "attributes": {
              "startLine": 99,
              "comments": [
                {
                  "nodeType": "Comment_Doc",
                  "text": "/**\n         * At this point, $range is a positive number greater than 0. It might\n         * overflow, however, if $max - $min > PHP_INT_MAX. PHP will cast it to\n         * a float and we will lose some precision.\n         */",
                  "line": 94,
                  "filePos": 3304,
                  "tokenPos": 186,
                  "endLine": 98,
                  "endFilePos": 3529,
                  "endTokenPos": 186
                }
              ],
              "endLine": 99
            }
          },
          {
            "nodeType": "Stmt_If",
            "cond": {
              "nodeType": "Expr_BooleanNot",
              "expr": {
                "nodeType": "Expr_FuncCall",
                "name": {
                  "nodeType": "Name",
                  "parts": [
                    "is_int"
                  ],
                  "attributes": {
                    "startLine": 104,
                    "endLine": 104
                  }
                },
                "args": [
                  {
                    "nodeType": "Arg",
                    "value": {
                      "nodeType": "Expr_Variable",
                      "name": "range",
                      "attributes": {
                        "startLine": 104,
                        "endLine": 104
                      }
                    },
                    "byRef": false,
                    "unpack": false,
                    "attributes": {
                      "startLine": 104,
                      "endLine": 104
                    }
                  }
                ],
                "attributes": {
                  "startLine": 104,
                  "endLine": 104
                }
              },
              "attributes": {
                "startLine": 104,
                "endLine": 104
              }
            },
            "stmts": [
              {
                "nodeType": "Stmt_Expression",
                "expr": {
                  "nodeType": "Expr_Assign",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "bytes",
                    "attributes": {
                      "startLine": 117,
                      "comments": [
                        {
                          "nodeType": "Comment_Doc",
                          "text": "/**\n             * Still safely calculate wider ranges.\n             * Provided by @CodesInChaos, @oittaa\n             *\n             * @ref https://gist.github.com/CodesInChaos/03f9ea0b58e8b2b8d435\n             *\n             * We use ~0 as a mask in this case because it generates all 1s\n             *\n             * @ref https://eval.in/400356 (32-bit)\n             * @ref http://3v4l.org/XX9r5  (64-bit)\n             */",
                          "line": 106,
                          "filePos": 3668,
                          "tokenPos": 213,
                          "endLine": 116,
                          "endFilePos": 4091,
                          "endTokenPos": 213
                        }
                      ],
                      "endLine": 117
                    }
                  },
                  "expr": {
                    "nodeType": "Expr_ConstFetch",
                    "name": {
                      "nodeType": "Name",
                      "parts": [
                        "PHP_INT_SIZE"
                      ],
                      "attributes": {
                        "startLine": 117,
                        "endLine": 117
                      }
                    },
                    "attributes": {
                      "startLine": 117,
                      "endLine": 117
                    }
                  },
                  "attributes": {
                    "startLine": 117,
                    "comments": [
                      {
                        "nodeType": "Comment_Doc",
                        "text": "/**\n             * Still safely calculate wider ranges.\n             * Provided by @CodesInChaos, @oittaa\n             *\n             * @ref https://gist.github.com/CodesInChaos/03f9ea0b58e8b2b8d435\n             *\n             * We use ~0 as a mask in this case because it generates all 1s\n             *\n             * @ref https://eval.in/400356 (32-bit)\n             * @ref http://3v4l.org/XX9r5  (64-bit)\n             */",
                        "line": 106,
                        "filePos": 3668,
                        "tokenPos": 213,
                        "endLine": 116,
                        "endFilePos": 4091,
                        "endTokenPos": 213
                      }
                    ],
                    "endLine": 117
                  }
                },
                "attributes": {
                  "startLine": 117,
                  "comments": [
                    {
                      "nodeType": "Comment_Doc",
                      "text": "/**\n             * Still safely calculate wider ranges.\n             * Provided by @CodesInChaos, @oittaa\n             *\n             * @ref https://gist.github.com/CodesInChaos/03f9ea0b58e8b2b8d435\n             *\n             * We use ~0 as a mask in this case because it generates all 1s\n             *\n             * @ref https://eval.in/400356 (32-bit)\n             * @ref http://3v4l.org/XX9r5  (64-bit)\n             */",
                      "line": 106,
                      "filePos": 3668,
                      "tokenPos": 213,
                      "endLine": 116,
                      "endFilePos": 4091,
                      "endTokenPos": 213
                    }
                  ],
                  "endLine": 117
                }
              },
              {
                "nodeType": "Stmt_Expression",
                "expr": {
                  "nodeType": "Expr_Assign",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "mask",
                    "attributes": {
                      "startLine": 118,
                      "endLine": 118
                    }
                  },
                  "expr": {
                    "nodeType": "Expr_BitwiseNot",
                    "expr": {
                      "nodeType": "Scalar_LNumber",
                      "value": 0,
                      "attributes": {
                        "startLine": 118,
                        "endLine": 118,
                        "kind": 10
                      }
                    },
                    "attributes": {
                      "startLine": 118,
                      "endLine": 118
                    }
                  },
                  "attributes": {
                    "startLine": 118,
                    "endLine": 118
                  }
                },
                "attributes": {
                  "startLine": 118,
                  "endLine": 118
                }
              }
            ],
            "elseifs": [],
            "else": {
              "nodeType": "Stmt_Else",
              "stmts": [
                {
                  "nodeType": "Stmt_While",
                  "cond": {
                    "nodeType": "Expr_BinaryOp_Greater",
                    "left": {
                      "nodeType": "Expr_Variable",
                      "name": "range",
                      "attributes": {
                        "startLine": 126,
                        "endLine": 126
                      }
                    },
                    "right": {
                      "nodeType": "Scalar_LNumber",
                      "value": 0,
                      "attributes": {
                        "startLine": 126,
                        "endLine": 126,
                        "kind": 10
                      }
                    },
                    "attributes": {
                      "startLine": 126,
                      "endLine": 126
                    }
                  },
                  "stmts": [
                    {
                      "nodeType": "Stmt_If",
                      "cond": {
                        "nodeType": "Expr_BinaryOp_Identical",
                        "left": {
                          "nodeType": "Expr_BinaryOp_Mod",
                          "left": {
                            "nodeType": "Expr_Variable",
                            "name": "bits",
                            "attributes": {
                              "startLine": 127,
                              "endLine": 127
                            }
                          },
                          "right": {
                            "nodeType": "Scalar_LNumber",
                            "value": 8,
                            "attributes": {
                              "startLine": 127,
                              "endLine": 127,
                              "kind": 10
                            }
                          },
                          "attributes": {
                            "startLine": 127,
                            "endLine": 127
                          }
                        },
                        "right": {
                          "nodeType": "Scalar_LNumber",
                          "value": 0,
                          "attributes": {
                            "startLine": 127,
                            "endLine": 127,
                            "kind": 10
                          }
                        },
                        "attributes": {
                          "startLine": 127,
                          "endLine": 127
                        }
                      },
                      "stmts": [
                        {
                          "nodeType": "Stmt_Expression",
                          "expr": {
                            "nodeType": "Expr_PreInc",
                            "var": {
                              "nodeType": "Expr_Variable",
                              "name": "bytes",
                              "attributes": {
                                "startLine": 128,
                                "endLine": 128
                              }
                            },
                            "attributes": {
                              "startLine": 128,
                              "endLine": 128
                            }
                          },
                          "attributes": {
                            "startLine": 128,
                            "endLine": 128
                          }
                        }
                      ],
                      "elseifs": [],
                      "else": null,
                      "attributes": {
                        "startLine": 127,
                        "endLine": 129
                      }
                    },
                    {
                      "nodeType": "Stmt_Expression",
                      "expr": {
                        "nodeType": "Expr_PreInc",
                        "var": {
                          "nodeType": "Expr_Variable",
                          "name": "bits",
                          "attributes": {
                            "startLine": 130,
                            "endLine": 130
                          }
                        },
                        "attributes": {
                          "startLine": 130,
                          "endLine": 130
                        }
                      },
                      "attributes": {
                        "startLine": 130,
                        "endLine": 130
                      }
                    },
                    {
                      "nodeType": "Stmt_Expression",
                      "expr": {
                        "nodeType": "Expr_AssignOp_ShiftRight",
                        "var": {
                          "nodeType": "Expr_Variable",
                          "name": "range",
                          "attributes": {
                            "startLine": 131,
                            "endLine": 131
                          }
                        },
                        "expr": {
                          "nodeType": "Scalar_LNumber",
                          "value": 1,
                          "attributes": {
                            "startLine": 131,
                            "endLine": 131,
                            "kind": 10
                          }
                        },
                        "attributes": {
                          "startLine": 131,
                          "endLine": 131
                        }
                      },
                      "attributes": {
                        "startLine": 131,
                        "endLine": 131
                      }
                    },
                    {
                      "nodeType": "Stmt_Expression",
                      "expr": {
                        "nodeType": "Expr_Assign",
                        "var": {
                          "nodeType": "Expr_Variable",
                          "name": "mask",
                          "attributes": {
                            "startLine": 132,
                            "endLine": 132
                          }
                        },
                        "expr": {
                          "nodeType": "Expr_BinaryOp_BitwiseOr",
                          "left": {
                            "nodeType": "Expr_BinaryOp_ShiftLeft",
                            "left": {
                              "nodeType": "Expr_Variable",
                              "name": "mask",
                              "attributes": {
                                "startLine": 132,
                                "endLine": 132
                              }
                            },
                            "right": {
                              "nodeType": "Scalar_LNumber",
                              "value": 1,
                              "attributes": {
                                "startLine": 132,
                                "endLine": 132,
                                "kind": 10
                              }
                            },
                            "attributes": {
                              "startLine": 132,
                              "endLine": 132
                            }
                          },
                          "right": {
                            "nodeType": "Scalar_LNumber",
                            "value": 1,
                            "attributes": {
                              "startLine": 132,
                              "endLine": 132,
                              "kind": 10
                            }
                          },
                          "attributes": {
                            "startLine": 132,
                            "endLine": 132
                          }
                        },
                        "attributes": {
                          "startLine": 132,
                          "endLine": 132
                        }
                      },
                      "attributes": {
                        "startLine": 132,
                        "endLine": 132
                      }
                    }
                  ],
                  "attributes": {
                    "startLine": 126,
                    "comments": [
                      {
                        "nodeType": "Comment_Doc",
                        "text": "/**\n             * $bits is effectively ceil(log($range, 2)) without dealing with\n             * type juggling\n             */",
                        "line": 122,
                        "filePos": 4183,
                        "tokenPos": 236,
                        "endLine": 125,
                        "endFilePos": 4308,
                        "endTokenPos": 236
                      }
                    ],
                    "endLine": 133
                  }
                },
                {
                  "nodeType": "Stmt_Expression",
                  "expr": {
                    "nodeType": "Expr_Assign",
                    "var": {
                      "nodeType": "Expr_Variable",
                      "name": "valueShift",
                      "attributes": {
                        "startLine": 134,
                        "endLine": 134
                      }
                    },
                    "expr": {
                      "nodeType": "Expr_Variable",
                      "name": "min",
                      "attributes": {
                        "startLine": 134,
                        "endLine": 134
                      }
                    },
                    "attributes": {
                      "startLine": 134,
                      "endLine": 134
                    }
                  },
                  "attributes": {
                    "startLine": 134,
                    "endLine": 134
                  }
                }
              ],
              "attributes": {
                "startLine": 120,
                "endLine": 135
              }
            },
            "attributes": {
              "startLine": 104,
              "comments": [
                {
                  "nodeType": "Comment_Doc",
                  "text": "/**\n         * Test for integer overflow:\n         */",
                  "line": 101,
                  "filePos": 3570,
                  "tokenPos": 199,
                  "endLine": 103,
                  "endFilePos": 3622,
                  "endTokenPos": 199
                }
              ],
              "endLine": 135
            }
          },
          {
            "nodeType": "Stmt_Expression",
            "expr": {
              "nodeType": "Expr_Assign",
              "var": {
                "nodeType": "Expr_Variable",
                "name": "val",
                "attributes": {
                  "startLine": 137,
                  "endLine": 137
                }
              },
              "expr": {
                "nodeType": "Scalar_LNumber",
                "value": 0,
                "attributes": {
                  "startLine": 137,
                  "endLine": 137,
                  "kind": 10
                }
              },
              "attributes": {
                "startLine": 137,
                "endLine": 137
              }
            },
            "attributes": {
              "startLine": 137,
              "endLine": 137
            }
          },
          {
            "nodeType": "Stmt_Do",
            "stmts": [
              {
                "nodeType": "Stmt_If",
                "cond": {
                  "nodeType": "Expr_BinaryOp_Greater",
                  "left": {
                    "nodeType": "Expr_Variable",
                    "name": "attempts",
                    "attributes": {
                      "startLine": 147,
                      "endLine": 147
                    }
                  },
                  "right": {
                    "nodeType": "Scalar_LNumber",
                    "value": 128,
                    "attributes": {
                      "startLine": 147,
                      "endLine": 147,
                      "kind": 10
                    }
                  },
                  "attributes": {
                    "startLine": 147,
                    "endLine": 147
                  }
                },
                "stmts": [
                  {
                    "nodeType": "Stmt_Throw",
                    "expr": {
                      "nodeType": "Expr_New",
                      "class": {
                        "nodeType": "Name",
                        "parts": [
                          "Exception"
                        ],
                        "attributes": {
                          "startLine": 148,
                          "endLine": 148
                        }
                      },
                      "args": [
                        {
                          "nodeType": "Arg",
                          "value": {
                            "nodeType": "Scalar_String",
                            "value": "random_int: RNG is broken - too many rejections",
                            "attributes": {
                              "startLine": 149,
                              "endLine": 149,
                              "kind": 1
                            }
                          },
                          "byRef": false,
                          "unpack": false,
                          "attributes": {
                            "startLine": 149,
                            "endLine": 149
                          }
                        }
                      ],
                      "attributes": {
                        "startLine": 148,
                        "endLine": 150
                      }
                    },
                    "attributes": {
                      "startLine": 148,
                      "endLine": 150
                    }
                  }
                ],
                "elseifs": [],
                "else": null,
                "attributes": {
                  "startLine": 147,
                  "comments": [
                    {
                      "nodeType": "Comment_Doc",
                      "text": "/**\n             * The rejection probability is at most 0.5, so this corresponds\n             * to a failure probability of 2^-128 for a working RNG\n             */",
                      "line": 143,
                      "filePos": 4788,
                      "tokenPos": 322,
                      "endLine": 146,
                      "endFilePos": 4951,
                      "endTokenPos": 322
                    }
                  ],
                  "endLine": 151
                }
              },
              {
                "nodeType": "Stmt_Expression",
                "expr": {
                  "nodeType": "Expr_Assign",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "randomByteString",
                    "attributes": {
                      "startLine": 156,
                      "comments": [
                        {
                          "nodeType": "Comment_Doc",
                          "text": "/**\n             * Let's grab the necessary number of random bytes\n             */",
                          "line": 153,
                          "filePos": 5141,
                          "tokenPos": 350,
                          "endLine": 155,
                          "endFilePos": 5222,
                          "endTokenPos": 350
                        }
                      ],
                      "endLine": 156
                    }
                  },
                  "expr": {
                    "nodeType": "Expr_FuncCall",
                    "name": {
                      "nodeType": "Name",
                      "parts": [
                        "random_bytes"
                      ],
                      "attributes": {
                        "startLine": 156,
                        "endLine": 156
                      }
                    },
                    "args": [
                      {
                        "nodeType": "Arg",
                        "value": {
                          "nodeType": "Expr_Variable",
                          "name": "bytes",
                          "attributes": {
                            "startLine": 156,
                            "endLine": 156
                          }
                        },
                        "byRef": false,
                        "unpack": false,
                        "attributes": {
                          "startLine": 156,
                          "endLine": 156
                        }
                      }
                    ],
                    "attributes": {
                      "startLine": 156,
                      "endLine": 156
                    }
                  },
                  "attributes": {
                    "startLine": 156,
                    "comments": [
                      {
                        "nodeType": "Comment_Doc",
                        "text": "/**\n             * Let's grab the necessary number of random bytes\n             */",
                        "line": 153,
                        "filePos": 5141,
                        "tokenPos": 350,
                        "endLine": 155,
                        "endFilePos": 5222,
                        "endTokenPos": 350
                      }
                    ],
                    "endLine": 156
                  }
                },
                "attributes": {
                  "startLine": 156,
                  "comments": [
                    {
                      "nodeType": "Comment_Doc",
                      "text": "/**\n             * Let's grab the necessary number of random bytes\n             */",
                      "line": 153,
                      "filePos": 5141,
                      "tokenPos": 350,
                      "endLine": 155,
                      "endFilePos": 5222,
                      "endTokenPos": 350
                    }
                  ],
                  "endLine": 156
                }
              },
              {
                "nodeType": "Stmt_Expression",
                "expr": {
                  "nodeType": "Expr_AssignOp_BitwiseAnd",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "val",
                    "attributes": {
                      "startLine": 168,
                      "comments": [
                        {
                          "nodeType": "Comment_Doc",
                          "text": "/**\n             * Let's turn $randomByteString into an integer\n             *\n             * This uses bitwise operators (<< and |) to build an integer\n             * out of the values extracted from ord()\n             *\n             * Example: [9F] | [6D] | [32] | [0C] =>\n             *   159 + 27904 + 3276800 + 201326592 =>\n             *   204631455\n             */",
                          "line": 158,
                          "filePos": 5291,
                          "tokenPos": 362,
                          "endLine": 167,
                          "endFilePos": 5661,
                          "endTokenPos": 362
                        }
                      ],
                      "endLine": 168
                    }
                  },
                  "expr": {
                    "nodeType": "Scalar_LNumber",
                    "value": 0,
                    "attributes": {
                      "startLine": 168,
                      "endLine": 168,
                      "kind": 10
                    }
                  },
                  "attributes": {
                    "startLine": 168,
                    "comments": [
                      {
                        "nodeType": "Comment_Doc",
                        "text": "/**\n             * Let's turn $randomByteString into an integer\n             *\n             * This uses bitwise operators (<< and |) to build an integer\n             * out of the values extracted from ord()\n             *\n             * Example: [9F] | [6D] | [32] | [0C] =>\n             *   159 + 27904 + 3276800 + 201326592 =>\n             *   204631455\n             */",
                        "line": 158,
                        "filePos": 5291,
                        "tokenPos": 362,
                        "endLine": 167,
                        "endFilePos": 5661,
                        "endTokenPos": 362
                      }
                    ],
                    "endLine": 168
                  }
                },
                "attributes": {
                  "startLine": 168,
                  "comments": [
                    {
                      "nodeType": "Comment_Doc",
                      "text": "/**\n             * Let's turn $randomByteString into an integer\n             *\n             * This uses bitwise operators (<< and |) to build an integer\n             * out of the values extracted from ord()\n             *\n             * Example: [9F] | [6D] | [32] | [0C] =>\n             *   159 + 27904 + 3276800 + 201326592 =>\n             *   204631455\n             */",
                      "line": 158,
                      "filePos": 5291,
                      "tokenPos": 362,
                      "endLine": 167,
                      "endFilePos": 5661,
                      "endTokenPos": 362
                    }
                  ],
                  "endLine": 168
                }
              },
              {
                "nodeType": "Stmt_For",
                "init": [
                  {
                    "nodeType": "Expr_Assign",
                    "var": {
                      "nodeType": "Expr_Variable",
                      "name": "i",
                      "attributes": {
                        "startLine": 169,
                        "endLine": 169
                      }
                    },
                    "expr": {
                      "nodeType": "Scalar_LNumber",
                      "value": 0,
                      "attributes": {
                        "startLine": 169,
                        "endLine": 169,
                        "kind": 10
                      }
                    },
                    "attributes": {
                      "startLine": 169,
                      "endLine": 169
                    }
                  }
                ],
                "cond": [
                  {
                    "nodeType": "Expr_BinaryOp_Smaller",
                    "left": {
                      "nodeType": "Expr_Variable",
                      "name": "i",
                      "attributes": {
                        "startLine": 169,
                        "endLine": 169
                      }
                    },
                    "right": {
                      "nodeType": "Expr_Variable",
                      "name": "bytes",
                      "attributes": {
                        "startLine": 169,
                        "endLine": 169
                      }
                    },
                    "attributes": {
                      "startLine": 169,
                      "endLine": 169
                    }
                  }
                ],
                "loop": [
                  {
                    "nodeType": "Expr_PreInc",
                    "var": {
                      "nodeType": "Expr_Variable",
                      "name": "i",
                      "attributes": {
                        "startLine": 169,
                        "endLine": 169
                      }
                    },
                    "attributes": {
                      "startLine": 169,
                      "endLine": 169
                    }
                  }
                ],
                "stmts": [
                  {
                    "nodeType": "Stmt_Expression",
                    "expr": {
                      "nodeType": "Expr_AssignOp_BitwiseOr",
                      "var": {
                        "nodeType": "Expr_Variable",
                        "name": "val",
                        "attributes": {
                          "startLine": 170,
                          "endLine": 170
                        }
                      },
                      "expr": {
                        "nodeType": "Expr_BinaryOp_ShiftLeft",
                        "left": {
                          "nodeType": "Expr_FuncCall",
                          "name": {
                            "nodeType": "Name",
                            "parts": [
                              "ord"
                            ],
                            "attributes": {
                              "startLine": 170,
                              "endLine": 170
                            }
                          },
                          "args": [
                            {
                              "nodeType": "Arg",
                              "value": {
                                "nodeType": "Expr_ArrayDimFetch",
                                "var": {
                                  "nodeType": "Expr_Variable",
                                  "name": "randomByteString",
                                  "attributes": {
                                    "startLine": 170,
                                    "endLine": 170
                                  }
                                },
                                "dim": {
                                  "nodeType": "Expr_Variable",
                                  "name": "i",
                                  "attributes": {
                                    "startLine": 170,
                                    "endLine": 170
                                  }
                                },
                                "attributes": {
                                  "startLine": 170,
                                  "endLine": 170
                                }
                              },
                              "byRef": false,
                              "unpack": false,
                              "attributes": {
                                "startLine": 170,
                                "endLine": 170
                              }
                            }
                          ],
                          "attributes": {
                            "startLine": 170,
                            "endLine": 170
                          }
                        },
                        "right": {
                          "nodeType": "Expr_BinaryOp_Mul",
                          "left": {
                            "nodeType": "Expr_Variable",
                            "name": "i",
                            "attributes": {
                              "startLine": 170,
                              "endLine": 170
                            }
                          },
                          "right": {
                            "nodeType": "Scalar_LNumber",
                            "value": 8,
                            "attributes": {
                              "startLine": 170,
                              "endLine": 170,
                              "kind": 10
                            }
                          },
                          "attributes": {
                            "startLine": 170,
                            "endLine": 170
                          }
                        },
                        "attributes": {
                          "startLine": 170,
                          "endLine": 170
                        }
                      },
                      "attributes": {
                        "startLine": 170,
                        "endLine": 170
                      }
                    },
                    "attributes": {
                      "startLine": 170,
                      "endLine": 170
                    }
                  }
                ],
                "attributes": {
                  "startLine": 169,
                  "endLine": 171
                }
              },
              {
                "nodeType": "Stmt_Expression",
                "expr": {
                  "nodeType": "Expr_AssignOp_BitwiseAnd",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "val",
                    "attributes": {
                      "startLine": 176,
                      "comments": [
                        {
                          "nodeType": "Comment_Doc",
                          "text": "/**\n             * Apply mask\n             */",
                          "line": 173,
                          "filePos": 5823,
                          "tokenPos": 419,
                          "endLine": 175,
                          "endFilePos": 5867,
                          "endTokenPos": 419
                        }
                      ],
                      "endLine": 176
                    }
                  },
                  "expr": {
                    "nodeType": "Expr_Variable",
                    "name": "mask",
                    "attributes": {
                      "startLine": 176,
                      "endLine": 176
                    }
                  },
                  "attributes": {
                    "startLine": 176,
                    "comments": [
                      {
                        "nodeType": "Comment_Doc",
                        "text": "/**\n             * Apply mask\n             */",
                        "line": 173,
                        "filePos": 5823,
                        "tokenPos": 419,
                        "endLine": 175,
                        "endFilePos": 5867,
                        "endTokenPos": 419
                      }
                    ],
                    "endLine": 176
                  }
                },
                "attributes": {
                  "startLine": 176,
                  "comments": [
                    {
                      "nodeType": "Comment_Doc",
                      "text": "/**\n             * Apply mask\n             */",
                      "line": 173,
                      "filePos": 5823,
                      "tokenPos": 419,
                      "endLine": 175,
                      "endFilePos": 5867,
                      "endTokenPos": 419
                    }
                  ],
                  "endLine": 176
                }
              },
              {
                "nodeType": "Stmt_Expression",
                "expr": {
                  "nodeType": "Expr_AssignOp_Plus",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "val",
                    "attributes": {
                      "startLine": 177,
                      "endLine": 177
                    }
                  },
                  "expr": {
                    "nodeType": "Expr_Variable",
                    "name": "valueShift",
                    "attributes": {
                      "startLine": 177,
                      "endLine": 177
                    }
                  },
                  "attributes": {
                    "startLine": 177,
                    "endLine": 177
                  }
                },
                "attributes": {
                  "startLine": 177,
                  "endLine": 177
                }
              },
              {
                "nodeType": "Stmt_Expression",
                "expr": {
                  "nodeType": "Expr_PreInc",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "attempts",
                    "attributes": {
                      "startLine": 179,
                      "endLine": 179
                    }
                  },
                  "attributes": {
                    "startLine": 179,
                    "endLine": 179
                  }
                },
                "attributes": {
                  "startLine": 179,
                  "endLine": 179
                }
              },
              {
                "nodeType": "Stmt_Nop",
                "attributes": {
                  "comments": [
                    {
                      "nodeType": "Comment_Doc",
                      "text": "/**\n             * If $val overflows to a floating point number,\n             * ... or is larger than $max,\n             * ... or smaller than $min,\n             * then try again.\n             */",
                      "line": 180,
                      "filePos": 5967,
                      "tokenPos": 439,
                      "endLine": 185,
                      "endFilePos": 6161,
                      "endTokenPos": 439
                    }
                  ],
                  "startLine": 185,
                  "endLine": 185,
                  "startFilePos": 6162,
                  "endFilePos": 6161,
                  "startTokenPos": 440,
                  "endTokenPos": 439
                }
              }
            ],
            "cond": {
              "nodeType": "Expr_BinaryOp_BooleanOr",
              "left": {
                "nodeType": "Expr_BinaryOp_BooleanOr",
                "left": {
                  "nodeType": "Expr_BooleanNot",
                  "expr": {
                    "nodeType": "Expr_FuncCall",
                    "name": {
                      "nodeType": "Name",
                      "parts": [
                        "is_int"
                      ],
                      "attributes": {
                        "startLine": 186,
                        "endLine": 186
                      }
                    },
                    "args": [
                      {
                        "nodeType": "Arg",
                        "value": {
                          "nodeType": "Expr_Variable",
                          "name": "val",
                          "attributes": {
                            "startLine": 186,
                            "endLine": 186
                          }
                        },
                        "byRef": false,
                        "unpack": false,
                        "attributes": {
                          "startLine": 186,
                          "endLine": 186
                        }
                      }
                    ],
                    "attributes": {
                      "startLine": 186,
                      "endLine": 186
                    }
                  },
                  "attributes": {
                    "startLine": 186,
                    "endLine": 186
                  }
                },
                "right": {
                  "nodeType": "Expr_BinaryOp_Greater",
                  "left": {
                    "nodeType": "Expr_Variable",
                    "name": "val",
                    "attributes": {
                      "startLine": 186,
                      "endLine": 186
                    }
                  },
                  "right": {
                    "nodeType": "Expr_Variable",
                    "name": "max",
                    "attributes": {
                      "startLine": 186,
                      "endLine": 186
                    }
                  },
                  "attributes": {
                    "startLine": 186,
                    "endLine": 186
                  }
                },
                "attributes": {
                  "startLine": 186,
                  "endLine": 186
                }
              },
              "right": {
                "nodeType": "Expr_BinaryOp_Smaller",
                "left": {
                  "nodeType": "Expr_Variable",
                  "name": "val",
                  "attributes": {
                    "startLine": 186,
                    "endLine": 186
                  }
                },
                "right": {
                  "nodeType": "Expr_Variable",
                  "name": "min",
                  "attributes": {
                    "startLine": 186,
                    "endLine": 186
                  }
                },
                "attributes": {
                  "startLine": 186,
                  "endLine": 186
                }
              },
              "attributes": {
                "startLine": 186,
                "endLine": 186
              }
            },
            "attributes": {
              "startLine": 142,
              "comments": [
                {
                  "nodeType": "Comment_Doc",
                  "text": "/**\n         * Now that we have our parameters set up, let's begin generating\n         * random integers until one falls between $min and $max\n         */",
                  "line": 138,
                  "filePos": 4608,
                  "tokenPos": 316,
                  "endLine": 141,
                  "endFilePos": 4761,
                  "endTokenPos": 316
                }
              ],
              "endLine": 186
            }
          },
          {
            "nodeType": "Stmt_Return",
            "expr": {
              "nodeType": "Expr_Cast_Int",
              "expr": {
                "nodeType": "Expr_Variable",
                "name": "val",
                "attributes": {
                  "startLine": 188,
                  "endLine": 188
                }
              },
              "attributes": {
                "startLine": 188,
                "endLine": 188
              }
            },
            "attributes": {
              "startLine": 188,
              "endLine": 188
            }
          }
        ],
        "attributes": {
          "startLine": 41,
          "comments": [
            {
              "nodeType": "Comment_Doc",
              "text": "/**\n     * Random_* Compatibility Library\n     * for using the new PHP 7 random_* API in PHP 5 projects\n     *\n     * The MIT License (MIT)\n     *\n     * Copyright (c) 2015 - 2017 Paragon Initiative Enterprises\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */",
              "line": 4,
              "filePos": 45,
              "tokenPos": 14,
              "endLine": 29,
              "endFilePos": 1409,
              "endTokenPos": 14
            },
            {
              "nodeType": "Comment_Doc",
              "text": "/**\n     * Fetch a random integer between $min and $max inclusive\n     *\n     * @param int $min\n     * @param int $max\n     *\n     * @throws Exception\n     *\n     * @return int\n     */",
              "line": 31,
              "filePos": 1416,
              "tokenPos": 16,
              "endLine": 40,
              "endFilePos": 1599,
              "endTokenPos": 16
            }
          ],
          "endLine": 189
        }
      }
    ],
    "elseifs": [],
    "else": null,
    "attributes": {
      "startLine": 3,
      "endLine": 190
    }
  }
]