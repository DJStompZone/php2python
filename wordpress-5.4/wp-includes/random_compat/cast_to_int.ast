[
  {
    "nodeType": "Stmt_If",
    "cond": {
      "nodeType": "Expr_BooleanNot",
      "expr": {
        "nodeType": "Expr_FuncCall",
        "name": {
          "nodeType": "Name",
          "parts": [
            "is_callable"
          ],
          "attributes": {
            "startLine": 29,
            "endLine": 29
          }
        },
        "args": [
          {
            "nodeType": "Arg",
            "value": {
              "nodeType": "Scalar_String",
              "value": "RandomCompat_intval",
              "attributes": {
                "startLine": 29,
                "endLine": 29,
                "kind": 1
              }
            },
            "byRef": false,
            "unpack": false,
            "attributes": {
              "startLine": 29,
              "endLine": 29
            }
          }
        ],
        "attributes": {
          "startLine": 29,
          "endLine": 29
        }
      },
      "attributes": {
        "startLine": 29,
        "endLine": 29
      }
    },
    "stmts": [
      {
        "nodeType": "Stmt_Function",
        "byRef": false,
        "name": {
          "nodeType": "Identifier",
          "name": "RandomCompat_intval",
          "attributes": {
            "startLine": 48,
            "endLine": 48
          }
        },
        "params": [
          {
            "nodeType": "Param",
            "type": null,
            "byRef": false,
            "variadic": false,
            "var": {
              "nodeType": "Expr_Variable",
              "name": "number",
              "attributes": {
                "startLine": 48,
                "endLine": 48
              }
            },
            "default": null,
            "attributes": {
              "startLine": 48,
              "endLine": 48
            }
          },
          {
            "nodeType": "Param",
            "type": null,
            "byRef": false,
            "variadic": false,
            "var": {
              "nodeType": "Expr_Variable",
              "name": "fail_open",
              "attributes": {
                "startLine": 48,
                "endLine": 48
              }
            },
            "default": {
              "nodeType": "Expr_ConstFetch",
              "name": {
                "nodeType": "Name",
                "parts": [
                  "false"
                ],
                "attributes": {
                  "startLine": 48,
                  "endLine": 48
                }
              },
              "attributes": {
                "startLine": 48,
                "endLine": 48
              }
            },
            "attributes": {
              "startLine": 48,
              "endLine": 48
            }
          }
        ],
        "returnType": null,
        "stmts": [
          {
            "nodeType": "Stmt_If",
            "cond": {
              "nodeType": "Expr_BinaryOp_BooleanOr",
              "left": {
                "nodeType": "Expr_FuncCall",
                "name": {
                  "nodeType": "Name",
                  "parts": [
                    "is_int"
                  ],
                  "attributes": {
                    "startLine": 50,
                    "endLine": 50
                  }
                },
                "args": [
                  {
                    "nodeType": "Arg",
                    "value": {
                      "nodeType": "Expr_Variable",
                      "name": "number",
                      "attributes": {
                        "startLine": 50,
                        "endLine": 50
                      }
                    },
                    "byRef": false,
                    "unpack": false,
                    "attributes": {
                      "startLine": 50,
                      "endLine": 50
                    }
                  }
                ],
                "attributes": {
                  "startLine": 50,
                  "endLine": 50
                }
              },
              "right": {
                "nodeType": "Expr_FuncCall",
                "name": {
                  "nodeType": "Name",
                  "parts": [
                    "is_float"
                  ],
                  "attributes": {
                    "startLine": 50,
                    "endLine": 50
                  }
                },
                "args": [
                  {
                    "nodeType": "Arg",
                    "value": {
                      "nodeType": "Expr_Variable",
                      "name": "number",
                      "attributes": {
                        "startLine": 50,
                        "endLine": 50
                      }
                    },
                    "byRef": false,
                    "unpack": false,
                    "attributes": {
                      "startLine": 50,
                      "endLine": 50
                    }
                  }
                ],
                "attributes": {
                  "startLine": 50,
                  "endLine": 50
                }
              },
              "attributes": {
                "startLine": 50,
                "endLine": 50
              }
            },
            "stmts": [
              {
                "nodeType": "Stmt_Expression",
                "expr": {
                  "nodeType": "Expr_AssignOp_Plus",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "number",
                    "attributes": {
                      "startLine": 51,
                      "endLine": 51
                    }
                  },
                  "expr": {
                    "nodeType": "Scalar_LNumber",
                    "value": 0,
                    "attributes": {
                      "startLine": 51,
                      "endLine": 51,
                      "kind": 10
                    }
                  },
                  "attributes": {
                    "startLine": 51,
                    "endLine": 51
                  }
                },
                "attributes": {
                  "startLine": 51,
                  "endLine": 51
                }
              }
            ],
            "elseifs": [
              {
                "nodeType": "Stmt_ElseIf",
                "cond": {
                  "nodeType": "Expr_FuncCall",
                  "name": {
                    "nodeType": "Name",
                    "parts": [
                      "is_numeric"
                    ],
                    "attributes": {
                      "startLine": 52,
                      "endLine": 52
                    }
                  },
                  "args": [
                    {
                      "nodeType": "Arg",
                      "value": {
                        "nodeType": "Expr_Variable",
                        "name": "number",
                        "attributes": {
                          "startLine": 52,
                          "endLine": 52
                        }
                      },
                      "byRef": false,
                      "unpack": false,
                      "attributes": {
                        "startLine": 52,
                        "endLine": 52
                      }
                    }
                  ],
                  "attributes": {
                    "startLine": 52,
                    "endLine": 52
                  }
                },
                "stmts": [
                  {
                    "nodeType": "Stmt_Expression",
                    "expr": {
                      "nodeType": "Expr_AssignOp_Plus",
                      "var": {
                        "nodeType": "Expr_Variable",
                        "name": "number",
                        "attributes": {
                          "startLine": 53,
                          "endLine": 53
                        }
                      },
                      "expr": {
                        "nodeType": "Scalar_LNumber",
                        "value": 0,
                        "attributes": {
                          "startLine": 53,
                          "endLine": 53,
                          "kind": 10
                        }
                      },
                      "attributes": {
                        "startLine": 53,
                        "endLine": 53
                      }
                    },
                    "attributes": {
                      "startLine": 53,
                      "endLine": 53
                    }
                  }
                ],
                "attributes": {
                  "startLine": 52,
                  "endLine": 54
                }
              }
            ],
            "else": null,
            "attributes": {
              "startLine": 50,
              "endLine": 54
            }
          },
          {
            "nodeType": "Stmt_If",
            "cond": {
              "nodeType": "Expr_BinaryOp_BooleanAnd",
              "left": {
                "nodeType": "Expr_BinaryOp_BooleanAnd",
                "left": {
                  "nodeType": "Expr_FuncCall",
                  "name": {
                    "nodeType": "Name",
                    "parts": [
                      "is_float"
                    ],
                    "attributes": {
                      "startLine": 57,
                      "endLine": 57
                    }
                  },
                  "args": [
                    {
                      "nodeType": "Arg",
                      "value": {
                        "nodeType": "Expr_Variable",
                        "name": "number",
                        "attributes": {
                          "startLine": 57,
                          "endLine": 57
                        }
                      },
                      "byRef": false,
                      "unpack": false,
                      "attributes": {
                        "startLine": 57,
                        "endLine": 57
                      }
                    }
                  ],
                  "attributes": {
                    "startLine": 57,
                    "endLine": 57
                  }
                },
                "right": {
                  "nodeType": "Expr_BinaryOp_Greater",
                  "left": {
                    "nodeType": "Expr_Variable",
                    "name": "number",
                    "attributes": {
                      "startLine": 59,
                      "endLine": 59
                    }
                  },
                  "right": {
                    "nodeType": "Expr_BitwiseNot",
                    "expr": {
                      "nodeType": "Expr_ConstFetch",
                      "name": {
                        "nodeType": "Name",
                        "parts": [
                          "PHP_INT_MAX"
                        ],
                        "attributes": {
                          "startLine": 59,
                          "endLine": 59
                        }
                      },
                      "attributes": {
                        "startLine": 59,
                        "endLine": 59
                      }
                    },
                    "attributes": {
                      "startLine": 59,
                      "endLine": 59
                    }
                  },
                  "attributes": {
                    "startLine": 59,
                    "endLine": 59
                  }
                },
                "attributes": {
                  "startLine": 57,
                  "endLine": 59
                }
              },
              "right": {
                "nodeType": "Expr_BinaryOp_Smaller",
                "left": {
                  "nodeType": "Expr_Variable",
                  "name": "number",
                  "attributes": {
                    "startLine": 61,
                    "endLine": 61
                  }
                },
                "right": {
                  "nodeType": "Expr_ConstFetch",
                  "name": {
                    "nodeType": "Name",
                    "parts": [
                      "PHP_INT_MAX"
                    ],
                    "attributes": {
                      "startLine": 61,
                      "endLine": 61
                    }
                  },
                  "attributes": {
                    "startLine": 61,
                    "endLine": 61
                  }
                },
                "attributes": {
                  "startLine": 61,
                  "endLine": 61
                }
              },
              "attributes": {
                "startLine": 57,
                "endLine": 61
              }
            },
            "stmts": [
              {
                "nodeType": "Stmt_Expression",
                "expr": {
                  "nodeType": "Expr_Assign",
                  "var": {
                    "nodeType": "Expr_Variable",
                    "name": "number",
                    "attributes": {
                      "startLine": 63,
                      "endLine": 63
                    }
                  },
                  "expr": {
                    "nodeType": "Expr_Cast_Int",
                    "expr": {
                      "nodeType": "Expr_Variable",
                      "name": "number",
                      "attributes": {
                        "startLine": 63,
                        "endLine": 63
                      }
                    },
                    "attributes": {
                      "startLine": 63,
                      "endLine": 63
                    }
                  },
                  "attributes": {
                    "startLine": 63,
                    "endLine": 63
                  }
                },
                "attributes": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            ],
            "elseifs": [],
            "else": null,
            "attributes": {
              "startLine": 56,
              "endLine": 64
            }
          },
          {
            "nodeType": "Stmt_If",
            "cond": {
              "nodeType": "Expr_FuncCall",
              "name": {
                "nodeType": "Name",
                "parts": [
                  "is_int"
                ],
                "attributes": {
                  "startLine": 66,
                  "endLine": 66
                }
              },
              "args": [
                {
                  "nodeType": "Arg",
                  "value": {
                    "nodeType": "Expr_Variable",
                    "name": "number",
                    "attributes": {
                      "startLine": 66,
                      "endLine": 66
                    }
                  },
                  "byRef": false,
                  "unpack": false,
                  "attributes": {
                    "startLine": 66,
                    "endLine": 66
                  }
                }
              ],
              "attributes": {
                "startLine": 66,
                "endLine": 66
              }
            },
            "stmts": [
              {
                "nodeType": "Stmt_Return",
                "expr": {
                  "nodeType": "Expr_Cast_Int",
                  "expr": {
                    "nodeType": "Expr_Variable",
                    "name": "number",
                    "attributes": {
                      "startLine": 67,
                      "endLine": 67
                    }
                  },
                  "attributes": {
                    "startLine": 67,
                    "endLine": 67
                  }
                },
                "attributes": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            ],
            "elseifs": [
              {
                "nodeType": "Stmt_ElseIf",
                "cond": {
                  "nodeType": "Expr_BooleanNot",
                  "expr": {
                    "nodeType": "Expr_Variable",
                    "name": "fail_open",
                    "attributes": {
                      "startLine": 68,
                      "endLine": 68
                    }
                  },
                  "attributes": {
                    "startLine": 68,
                    "endLine": 68
                  }
                },
                "stmts": [
                  {
                    "nodeType": "Stmt_Throw",
                    "expr": {
                      "nodeType": "Expr_New",
                      "class": {
                        "nodeType": "Name",
                        "parts": [
                          "TypeError"
                        ],
                        "attributes": {
                          "startLine": 69,
                          "endLine": 69
                        }
                      },
                      "args": [
                        {
                          "nodeType": "Arg",
                          "value": {
                            "nodeType": "Scalar_String",
                            "value": "Expected an integer.",
                            "attributes": {
                              "startLine": 70,
                              "endLine": 70,
                              "kind": 1
                            }
                          },
                          "byRef": false,
                          "unpack": false,
                          "attributes": {
                            "startLine": 70,
                            "endLine": 70
                          }
                        }
                      ],
                      "attributes": {
                        "startLine": 69,
                        "endLine": 71
                      }
                    },
                    "attributes": {
                      "startLine": 69,
                      "endLine": 71
                    }
                  }
                ],
                "attributes": {
                  "startLine": 68,
                  "endLine": 72
                }
              }
            ],
            "else": null,
            "attributes": {
              "startLine": 66,
              "endLine": 72
            }
          },
          {
            "nodeType": "Stmt_Return",
            "expr": {
              "nodeType": "Expr_Variable",
              "name": "number",
              "attributes": {
                "startLine": 73,
                "endLine": 73
              }
            },
            "attributes": {
              "startLine": 73,
              "endLine": 73
            }
          }
        ],
        "attributes": {
          "startLine": 48,
          "comments": [
            {
              "nodeType": "Comment_Doc",
              "text": "/**\n     * Cast to an integer if we can, safely.\n     * \n     * If you pass it a float in the range (~PHP_INT_MAX, PHP_INT_MAX)\n     * (non-inclusive), it will sanely cast it to an int. If you it's equal to\n     * ~PHP_INT_MAX or PHP_INT_MAX, we let it fail as not an integer. Floats \n     * lose precision, so the <= and => operators might accidentally let a float\n     * through.\n     * \n     * @param int|float $number    The number we want to convert to an int\n     * @param bool      $fail_open Set to true to not throw an exception\n     * \n     * @return float|int\n     * @psalm-suppress InvalidReturnType\n     *\n     * @throws TypeError\n     */",
              "line": 31,
              "filePos": 1325,
              "tokenPos": 15,
              "endLine": 47,
              "endFilePos": 1975,
              "endTokenPos": 15
            }
          ],
          "endLine": 74
        }
      }
    ],
    "elseifs": [],
    "else": null,
    "attributes": {
      "startLine": 29,
      "comments": [
        {
          "nodeType": "Comment_Doc",
          "text": "/**\n * Random_* Compatibility Library\n * for using the new PHP 7 random_* API in PHP 5 projects\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2015 - 2017 Paragon Initiative Enterprises\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */",
          "line": 2,
          "filePos": 6,
          "tokenPos": 1,
          "endLine": 27,
          "endFilePos": 1270,
          "endTokenPos": 1
        }
      ],
      "endLine": 75
    }
  }
]