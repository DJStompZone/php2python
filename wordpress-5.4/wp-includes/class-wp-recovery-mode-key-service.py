#!/usr/bin/env python3
# coding: utf-8
if '__PHP2PY_LOADED__' not in globals():
    import cgi
    import os
    import os.path
    import copy
    import sys
    from goto import with_goto
    with open(os.getenv('PHP2PY_COMPAT', 'php_compat.py')) as f:
        exec(compile(f.read(), '<string>', 'exec'))
    # end with
    globals()['__PHP2PY_LOADED__'] = True
# end if
#// 
#// Error Protection API: WP_Recovery_Mode_Key_Service class
#// 
#// @package WordPress
#// @since 5.2.0
#// 
#// 
#// Core class used to generate and validate keys used to enter Recovery Mode.
#// 
#// @since 5.2.0
#//
class WP_Recovery_Mode_Key_Service():
    option_name = "recovery_keys"
    #// 
    #// Creates a recovery mode token.
    #// 
    #// @since 5.2.0
    #// 
    #// @return string $token A random string to identify its associated key in storage.
    #//
    def generate_recovery_mode_token(self):
        
        return wp_generate_password(22, False)
    # end def generate_recovery_mode_token
    #// 
    #// Creates a recovery mode key.
    #// 
    #// @since 5.2.0
    #// 
    #// @global PasswordHash $wp_hasher
    #// 
    #// @param string $token A token generated by {@see generate_recovery_mode_token()}.
    #// @return string $key Recovery mode key.
    #//
    def generate_and_store_recovery_mode_key(self, token=None):
        
        global wp_hasher
        php_check_if_defined("wp_hasher")
        key = wp_generate_password(22, False)
        if php_empty(lambda : wp_hasher):
            php_include_file(ABSPATH + WPINC + "/class-phpass.php", once=True)
            wp_hasher = php_new_class("PasswordHash", lambda : PasswordHash(8, True))
        # end if
        hashed = wp_hasher.hashpassword(key)
        records = self.get_keys()
        records[token] = Array({"hashed_key": hashed, "created_at": time()})
        self.update_keys(records)
        #// 
        #// Fires when a recovery mode key is generated.
        #// 
        #// @since 5.2.0
        #// 
        #// @param string $token The recovery data token.
        #// @param string $key   The recovery mode key.
        #//
        do_action("generate_recovery_mode_key", token, key)
        return key
    # end def generate_and_store_recovery_mode_key
    #// 
    #// Verifies if the recovery mode key is correct.
    #// 
    #// Recovery mode keys can only be used once; the key will be consumed in the process.
    #// 
    #// @since 5.2.0
    #// 
    #// @param string $token The token used when generating the given key.
    #// @param string $key   The unhashed key.
    #// @param int    $ttl   Time in seconds for the key to be valid for.
    #// @return true|WP_Error True on success, error object on failure.
    #//
    def validate_recovery_mode_key(self, token=None, key=None, ttl=None):
        
        records = self.get_keys()
        if (not (php_isset(lambda : records[token]))):
            return php_new_class("WP_Error", lambda : WP_Error("token_not_found", __("Recovery Mode not initialized.")))
        # end if
        record = records[token]
        self.remove_key(token)
        if (not php_is_array(record)) or (not (php_isset(lambda : record["hashed_key"]) and php_isset(lambda : record["created_at"]))):
            return php_new_class("WP_Error", lambda : WP_Error("invalid_recovery_key_format", __("Invalid recovery key format.")))
        # end if
        if (not wp_check_password(key, record["hashed_key"])):
            return php_new_class("WP_Error", lambda : WP_Error("hash_mismatch", __("Invalid recovery key.")))
        # end if
        if time() > record["created_at"] + ttl:
            return php_new_class("WP_Error", lambda : WP_Error("key_expired", __("Recovery key expired.")))
        # end if
        return True
    # end def validate_recovery_mode_key
    #// 
    #// Removes expired recovery mode keys.
    #// 
    #// @since 5.2.0
    #// 
    #// @param int $ttl Time in seconds for the keys to be valid for.
    #//
    def clean_expired_keys(self, ttl=None):
        
        records = self.get_keys()
        for key,record in records:
            if (not (php_isset(lambda : record["created_at"]))) or time() > record["created_at"] + ttl:
                records[key] = None
            # end if
        # end for
        self.update_keys(records)
    # end def clean_expired_keys
    #// 
    #// Removes a used recovery key.
    #// 
    #// @since 5.2.0
    #// 
    #// @param string $token The token used when generating a recovery mode key.
    #//
    def remove_key(self, token=None):
        
        records = self.get_keys()
        if (not (php_isset(lambda : records[token]))):
            return
        # end if
        records[token] = None
        self.update_keys(records)
    # end def remove_key
    #// 
    #// Gets the recovery key records.
    #// 
    #// @since 5.2.0
    #// 
    #// @return array Associative array of $token => $data pairs, where $data has keys 'hashed_key'
    #// and 'created_at'.
    #//
    def get_keys(self):
        
        return get_option(self.option_name, Array())
    # end def get_keys
    #// 
    #// Updates the recovery key records.
    #// 
    #// @since 5.2.0
    #// 
    #// @param array $keys Associative array of $token => $data pairs, where $data has keys 'hashed_key'
    #// and 'created_at'.
    #// @return bool True on success, false on failure.
    #//
    def update_keys(self, keys=None):
        
        return update_option(self.option_name, keys)
    # end def update_keys
# end class WP_Recovery_Mode_Key_Service
